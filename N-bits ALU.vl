/* ++++++++++++++++Components+++++++++++++ */
module half_adder(sum, carry, a, b);
   input a, b;
   output sum, carry;
   xor(sum, a, b);
   and(carry, a, b);
endmodule


module full_adder(output sum, output carry, input x, input y, input z);
   wire s1, c1, c2;
   half_adder h1(s1, c1, x, y);
   half_adder h2(sum, c2, s1, z);
   or(carry, c1, c2);
endmodule

module mux2_1 (output y, input s, input A1, input A2);
wire a,b;
   and(a, A1, ~s);
   and(b, A2, s);
   or(y, a, b);       
endmodule

module mux4_1(output y, input[1:0] s, input a1, input a2, input a3, input a4);
wire a,b,c,d;
      and(a, a1, ~s[1], ~s[0]);
      and(b, a2, ~s[1], s[0]);
      and(c, a3, s[1], ~s[0]);
      and(d, a4, s[1], s[0]);
      or(y, a, b, c, d);
endmodule

module specialMux4_1(output  [4:0] y, input[1:0] s, input[4:0] a1, input[4:0] a2, input[4:0] a3, input[4:0] a4);

   wire [4:0] a;
   wire [4:0] b;
   wire [4:0] c;
   wire [4:0] d;

   and(a[0], a1[0], ~s[1], ~s[0]);
   and(b[0], a2[0], ~s[1], s[0]);
   and(c[0], a3[0], s[1], ~s[0]);
   and(d[0], a4[0], s[1], s[0]); //not used
   or(y[0], a[0], b[0], c[0], d[0]);

   and(a[1], a1[1], ~s[1], ~s[0]);
   and(b[1], a2[1], ~s[1], s[0]);
   and(c[1], a3[1], s[1], ~s[0]);
   and(d[1], a4[1], s[1], s[0]); //not used
   or(y[1], a[1], b[1], c[1], d[1]);

   and(a[2], a1[2], ~s[1], ~s[0]);
   and(b[2], a2[2], ~s[1], s[0]);
   and(c[2], a3[2], s[1], ~s[0]);
   and(d[2], a4[2], s[1], s[0]); //not used
   or(y[2], a[2], b[2], c[2],d[2]);

   and(a[3], a1[3], ~s[1], ~s[0]);
   and(b[3], a2[3], ~s[1], s[0]);
   and(c[3], a3[3], s[1], ~s[0]);
   and(d[3], a4[3], s[1], s[0]); //not used
   or(y[3], a[3], b[3], c[3], d[3]);

   and(a[4], a1[4], ~s[1], ~s[0]);
   and(b[4], a2[4], ~s[1], s[0]);
   and(c[4], a3[4], s[1], ~s[0]);
   and(d[4], a4[4], s[1], s[0]); //not used
   or(y[4], a[4], b[4], c[4], d[4]);

endmodule

//Arthemtic
module arth(output [4:0] p, input[1:0] s, input [3:0]A, input [3:0]B);
parameter N = 3;
wire [3:0] y;
wire [4:0] carries;
assign carries[0] =  1'b0;


//two's complement
wire[4:0] tempP;
wire[4:0] tempCarries;
wire[3:0] sta = 4'b0001;

assign tempCarries[0] = 1'b0;

full_adder f0(tempP[0], tempCarries[1], ~B[0], sta[0], tempCarries[0]);
full_adder f1(tempP[1], tempCarries[2], ~B[1], sta[1], tempCarries[1]);
full_adder f2(tempP[2], tempCarries[3], ~B[2], sta[2], tempCarries[2]);
full_adder f3(tempP[3], tempCarries[4], ~B[3], sta[3], tempCarries[3]);


assign tempP[4] = tempCarries[4];//TWO'S COMPLEMENT OF B 'Y'

mux4_1 m1(y[0], s, B[0], tempP[0], sta[0], 1'b1);//Y, ~Y, ,
full_adder mf1(p[0], carries[1], y[0], A[0], carries[0]);
mux4_1 m2(y[1], s, B[1], tempP[1], sta[1], 1'b1);//Y, ~Y, ,
full_adder mf2(p[1], carries[2], y[1], A[1], carries[1]);
mux4_1 m3(y[2], s, B[2], tempP[2], sta[2], 1'b1);//Y, ~Y, ,
full_adder mf3(p[2], carries[3], y[2], A[2], carries[2]);
mux4_1 m4(y[3], s, B[3], tempP[3], sta[3], 1'b1);//Y, ~Y, ,
full_adder mf4(p[3], carries[4], y[3], A[3], carries[3]);

assign p[4] = carries[4];   

endmodule



/* Shift Circuit */
module four_bit_right_arithmetic_shift_reg (output [4:0] y, input a1, input a2, input a3, input a4);
    mux2_1 m1(y[3], 1'b0, a1, 1'b0);
    mux2_1 m2(y[2], 1'b0, a1, 1'b0);
    mux2_1 m3(y[1], 1'b0, a2, 1'b0);
    mux2_1 m4(y[0], 1'b0, a3, 1'b0);
    buf(y[4], a4);
endmodule

/* Logic Circuit */
module logicUnit(output [4:0] y, input [1:0] s,input [3:0] A, input [3:0] B);
   wire [3:0] w1;
   wire [3:0] w2; 
   wire [3:0] w3;
   wire [3:0] w4;

   and(w1[0], A[0], B[0]);
   and(w1[1], A[1], B[1]);
   and(w1[2], A[2], B[2]);
   and(w1[3], A[3], B[3]);
   or(w2[0], A[0], B[0]);
   or(w2[1], A[1], B[1]);
   or(w2[2], A[2], B[2]);
   or(w2[3], A[3], B[3]);
   xor(w3[0], A[0], B[0]);
   xor(w3[1], A[1], B[1]);
   xor(w3[2], A[2], B[2]);
   xor(w3[3], A[3], B[3]);
   not(w4[0], A[0]);
   not(w4[1], A[1]);
   not(w4[2], A[2]);
   not(w4[3], A[3]);
   mux4_1 m1(y[0], s, w1[0], w2[0], w3[0], w4[0]);
   mux4_1 m2(y[1], s, w1[1], w2[1], w3[1], w4[1]);
   mux4_1 m3(y[2], s, w1[2], w2[2], w3[2], w4[2]);
   mux4_1 m4(y[3], s, w1[3], w2[3], w3[3], w4[3]);
   buf(y[4], 1'b0);
endmodule


module ALU(output [4:0] f, input [1:0] selectionALU, input [1:0] selection, input [3:0] A, input[3:0] B);
//run Arithmetic circuit
wire[4:0] arth;
arth ts(arth, selection, A, B);

//run Logic Circuit
wire [4:0] logCirc;// 0 1101
logicUnit lu(logCirc, selection, A, B);

//run shift Circuit
wire [4:0] sh; //0 1101
four_bit_right_arithmetic_shift_reg sl(sh, A[3], A[2], A[1], A[0]);

//send 4 inputs to 4x1 mux to select one output
wire[4:0] notUsedInput = 5'b00000;
specialMux4_1 f1(f, selectionALU, arth, logCirc, sh, notUsedInput);  
endmodule

module testALU(output [4:0] A, input [1:0] selectionALU, input[1:0] selection, input [3:0]X, input[3:0]Y);
   ALU test(A, selectionALU, selection, X, Y);

   initial
   begin
      $monitor("Carry=%b, A[3]=%b, A[2]=%b, A[1]=%b, A[0]=%b", A[4], A[3], A[2], A[1], A[0]);
      $finish;
   end
endmodule

module main();
   wire [4:0] A;
   wire [3:0] X, Y;
   buf (X[0], 1'b1);//0101
   buf (X[1], 1'b0);
   buf (X[2], 1'b1);
   buf (X[3], 1'b0);

   buf (Y[0], 1'b0);//0001
   buf (Y[1], 1'b1);
   buf (Y[2], 1'b0);
   buf (Y[3], 1'b0);

    //Selection inputs for Arithmetic/logic circuits
    wire[1:0] s;
    buf(s[0], 1'b1);
    buf(s[1], 1'b1);
    

    //Selection inputs for ALU unit
    wire[1:0] aluS;
    buf(aluS[0], 1'b0);
    buf(aluS[1], 1'b0);//10 shift right, 01 logic circuit, 00 arithmetic circuit, 11 empty input to alu 'not used'
    testALU testing(A, aluS, s ,X, Y);
endmodule